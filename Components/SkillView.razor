@using Folio.Models
@using Folio
@using System.Globalization;

<div class="skill-container stacker"
     style="height:@(Utils.FloatToREM(Height));
        width:@(Utils.FloatToREM(Width));
        border-radius: @(GetBorderRadius());
        background-color: @(GetColor());
        --fill-width: @(GetFillWidth());
        --basic-fill-width: @(AppConst.mobile ? GetFillWidth() : "0%");">

    <div class="stacked skill-fill animated"></div>
    <span class="stacked" style="font-size:@(GetFontSize())">@(Tag.name)</span>
</div>


@code {
    #region Variables
    [Parameter] public TagModel Tag { get; set; }
    [Parameter] public float Height { get; set; }
    [Parameter] public float Width { get; set; }
    [Parameter] public bool DisplayAsTag { get; set; }

    private float _seniorLevel = 3;

    private SkillModel Skill => Utils.SkillFromTag(Tag);
    private bool ShowLevel => Skill.level > 0;
    #endregion

    private string GetFillWidth() {
        int value = (int)Math.Ceiling((float)Skill.level / _seniorLevel * 100);
        return $"{((ShowLevel && !DisplayAsTag) ? value : 0)}%";
    }

    private string GetBorderRadius() {
        return $"{Utils.ConvertFloatToString(Height * 0.5f)}rem";
    }

    private string GetFontSize() {
        return $"{Utils.ConvertFloatToString(Height * 0.4f)}rem";
    }

    private string GetColor() {
        return (ShowLevel && !DisplayAsTag) ? AppConst.colorSuperTone : Tag.color;
    }
}


<style>
    :root {
        --fill-width: 50%;
        --basic-fill-width: 0%;
    }

    .skill-container {
        display: inline-block;
        overflow: hidden;
        margin: 0.2rem;
    }

        .skill-container:hover .skill-fill {
            width: var(--fill-width) !important;
            transition-property: width;
        }

    .skill-fill {
        width: var(--basic-fill-width) !important;
        background-color: @AppConst.color;
        transition-property: width;
    }

</style>
