@using System.Numerics;
@using Folio.Models;


<div class="project-card @(_hovered ? "project-card-hover" : null) animated" style="cursor:@(CursorType); height:@(CardHeight)"
     @onmouseenter="@(AppConst.mobile ? null : MouseEnter)"
     @onmouseleave="@(AppConst.mobile ? null : MouseLeave)"
     @onclick=MouseClick>
    <div class="card-bg animated"></div>
    <div class="card-content animated">
        <div class="image-frame" style="height:@(ImageHeight)">
            <div class="image animated" style="background-image:url(@Project.backgroundURL); background-color:@(BackgroundColor)"></div>
            <span class="stacked animated">@Project.description</span>
            @if (Project.description == AppConst.descriptionSpotify) {
                <i class="additional-icon bi-play stacked animated"></i>
            }
        </div>

        <p class="card-title" style="top:@(TitleTop)">@Project.name</p>

        @if (Project.tags != null) {
            <div class="card-separator animated"></div>

            <div class="skills-frame">
                @{
                    int perLine = 3;
                    for (int y = 0; y < Project.tags.Length; y += perLine) {
                        <div class="w-100">
                            @for (int x = 0; x < perLine; x++) {
                                int index = y + x;
                                if (index < Project.tags.Length) {
                                    <SkillView Tag="Project.tags[index]" Height="1.8f" Width="3.5f" DisplayAsTag=true></SkillView>
                                }
                            }
                        </div>
                    }
                }
            </div>
        }
    </div>
</div>


@inject IJSRuntime jsRuntime
@code {
    [Parameter] public ProjectModel Project { get; set; }

    private float _animIntensity = 0.3f;
    private float _baseHeight = 20f;
    private float _baseWidth = 15f;

    private bool _hovered = false;

    private string CardHeight => Project.tags == null ? "15rem" : "19rem";
    private string ImageHeight => Utils.FloatToREM((Project.tags == null ? 0.5f : 0.45f) * _baseHeight);
    private string TitleTop => Utils.FloatToREM((Project.tags == null ? 0.55f : 0.5f) * _baseHeight);
    private string BackgroundColor => string.IsNullOrEmpty(Project.backgroundURL) ? AppConst.colorSuperTone : "#00000000";
    private string CursorType => string.IsNullOrEmpty(Project.projectURL) ? "default" : "pointer";

    private async void OpenProjectPage() {
        if (string.IsNullOrEmpty(Project.projectURL))
            return;

        await jsRuntime.InvokeAsync<object>("open", Project.projectURL, "_blank");
    }

    private void MouseEnter() {
        _hovered = true;
    }

    private void MouseLeave() {
        _hovered = false;
    }

    private void MouseClick() {
        if (_hovered)
            OpenProjectPage();

        if (!AppConst.mobile)
            return;

        _hovered = !_hovered;
    }
}


<style>
    .project-card {
        position: relative;
        width: @(Utils.FloatToREM(_baseWidth));
        margin: 1rem;
        margin-bottom: 2rem;
        border-radius: 0.4rem;
        background-color: transparent;
    }

        .project-card .card-bg {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            right: 0;
            background-color: transparent;
            border-radius: inherit;
            transition-property: background-color, top, right;
        }

        .project-card .card-content {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            right: 0;
            background-color: transparent;
            border-radius: inherit;
            transition-property: background-color, top, right;
        }

        .project-card .image-frame {
            position: absolute;
            width: 95%;
            top: @(Utils.FloatToREM(_baseWidth * 0.025f));
            left: 2.5%;
            border-radius: 0.3rem;
            overflow: hidden;
            pointer-events: auto;
        }

            .project-card .image-frame .image {
                height: 100%;
                width: 100%;
                background-position: center;
                background-size: cover;
                transition-property: filter;
            }

            .project-card .image-frame span {
                color: transparent;
                width: 90%;
                left: 5%;
                font-size-adjust: inherit;
                z-index: 10;
                transition-property: color;
                font-weight: bold;
            }

            .project-card .image-frame .additional-icon {
                position: absolute;
                width: 90%;
                top: 1.5rem;
                left: 5%;
                text-align: center;
                font-size: 1.5rem;
                color: transparent;
                transition-property: color;
            }

        .project-card .card-title {
            position: absolute;
            left: 5%;
            width: 90%;
            text-align: center;
            font-size: large;
            margin: inherit;
        }

        .project-card .card-separator {
            position: absolute;
            height: @(AppConst.narrowBorder);
            width: 90%;
            top: @(Utils.FloatToREM(0.6f * _baseHeight));
            left: 5%;
            border-radius: inherit;
            background-color: @(AppConst.colorTint);
            transition-property: background-color;
        }

        .project-card .skills-frame {
            position: absolute;
            left: 5%;
            top: @(Utils.FloatToREM(0.65f * _baseHeight));
            width: 90%;
            height: @(Utils.FloatToREM(0.25f * _baseHeight));
            align-items: center;
            text-align: center;
            justify-content: center;
        }

    .project-card-hover {
    }

        .project-card-hover .card-bg {
            top: @(Utils.FloatToREM(_animIntensity));
            right: @(Utils.FloatToREM(_animIntensity));
            background-color: @(AppConst.colorSuperTone);
            transition-property: background-color, top, right;
        }

        .project-card-hover .card-content {
            top: @(Utils.FloatToREM(-_animIntensity));
            right: @(Utils.FloatToREM(-_animIntensity));
            background-color: @(AppConst.colorTint);
            transition-property: top, right;
        }

        .project-card-hover .image-frame .image {
            filter: blur(6px) brightness(0.4);
            transition-property: filter;
        }

        .project-card-hover .image-frame span {
            color: @AppConst.light;
            transition-property: color;
        }

        .project-card-hover .image-frame .additional-icon {
            color: @(AppConst.colorTint);
            transition-property: color;
        }

        .project-card-hover .card-separator {
            background-color: @(AppConst.light);
            transition-property: background-color;
        }
</style>
